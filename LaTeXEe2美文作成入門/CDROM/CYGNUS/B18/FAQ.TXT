FAQ.txt for gnu-win32 beta 18 release
May 7, 1997

What is it?
***********

   The GNU-Win32 tools are ports of the popular GNU development tools to
Windows NT/95 for the x86 and powerpc processors. Applications built
with these tools have access to the Microsoft Win32 API as well as the
Cygwin32 API which provides additional UNIX-like functionality including
unix sockets, process control with a working fork and select, etc...

   With these tools installed, it is now possible to write Win32
console or GUI applications that make use of the standard Microsoft
Win32 API and/or the Cygwin32 API.  It is possible to easily configure
and build many GNU tools from source (including the gnu-win32
development tools themselves).  It is possible to port many other
significant Unix programs to Windows NT/95 without making significant
changes to the source code.  Or you can just use bash and the many
other utilities as a fairly full unix-like environment to work in,
available from within bash or from the command.com.

Is it free software?
====================

   Yes.  Parts are GNU software (gcc, gas, ld, etc...), Parts are
covered by the Berkeley license, etc.  None of it is shareware.  You
don't have to pay anyone to use it.  Please see the copyright section
of the FAQ more more information on how the GNU General Public License
may affect your use of these tools.

A brief history of the project
==============================

   The first thing done was to enhance the development tools (gcc, gdb,
gas, et al) so that they could generate/interpret Win32 native object
files.

   The next task was to port the tools to Win NT/95.  We could have done
this by rewriting large portions of the source to work within the
context of the Win32 API.  But this would have meant spending a huge
amount of time on each and every tool.  Instead, we took a substantially
different approach by writing a shared library (cygwin.dll) that adds
the necessary unix-like functionality missing from the Win32 API (fork,
spawn, signals, select, sockets, etc.).  (We call this new interface the
Cygwin32 API).  Once written, it was possible to build working Win32
tools using unix-hosted cross-compilers, linking against this library.

   From this point, we pursued the goal of producing native tools
capable of rebuilding themselves natively under Windows NT.  Since
neither Windows NT nor Windows 95 come with standard unix utilities, we
had to get the GNU equivalents (fileutils, textutils, bash, etc.)
working with the cygwin32 API.  Most of the porting involved changes to
the configure mechanisms since many of them were not able to be built
with cross-compilers out of the box (out of the tarfile?).  With the
development tools and these additional "user" tools in place, running
the bash shell, Windows 95 and NT appear to be a flavor of unix to the
GNU configure mechanism (albeit a weird one?).

   As of beta release 17.1, native rebuilding works under x86 Windows NT
and Windows 95.

   \input texinfo

Release notes for beta 18
*************************

   You can find a link to the most recent release in
`ftp://ftp.cygnus.com/pub/gnu-win32/latest'

Changes since the last release
==============================

   This is a major release.  The new cygwin.dll is still
backwards-compatible with previously linked applications but contains
significant changes.

   We have completely changed the installation process to make use of
an InstallShield5-based installer.  This should reduce the number of
installation problems people have experienced in the past.  However, it
is still necessary to set environment variables by hand, as explained
later.  (Future gnu-win32 installers may include the capability to do
this automatically).

Changes in specific tools:
--------------------------

   GCC compilation times have been improved by 20-30% by using spawn()
instead of fork().

   GCC accepts both Win32 and POSIX paths/path lists in its environment
variables (COMPILER_PATH, LIBRARY_PATH, C_INCLUDE_PATH,
CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH)

   GDB comes with a tcl/tk-based GUI (gdbtk).  You can still invoke the
command line gdb by invoking it with "gdb -nw".

   Bash verifies that /tmp exists and is a directory upon startup.  It
complains if this isn't the case.

   Running gcc or ld with "-s" used to create invalid executables.  The
bug in bfd that was responsible for this has been fixed.

   The conflict between String.h and string.h (and other such pairs of
header files) where you include one and get the other has been fixed.

   The top level install-sh script tries to install foo.exe if asked to
install foo when foo's not present.  This fixes many installs of Unix
software.

   Dlltool has preliminary support for the IMPORT declaration in .def
files when invoked with -I.  Feel free to experiment with it but once
this functionality is tested more extensively this flag may go away.

   Time is upgraded to version 1.7.

   Make is upgraded to version 3.75.

   Make accepts both Win32 and POSIX path lists in the VPATH variable.

Changes in the Cygwin32 API (cygwin.dll):
-----------------------------------------

   The following is now supported:

   * UNC paths * Reverse index escapes in console code * Blocking
select()s on a combination of sockets/handles * Directory symlinks.  *
Reparenting of child processes.

   The following calls have been added:

   * mmap(), mprotect(), msync(), munmap().  fork() changed to support
these.  * fsync(), statfs(), fstatfs().  * getprotobynumber() and
getservbyport().  * get_osfhandle(), cwait().  * spawnl(), spawnle(),
spawnlp(), spawnlpe(), spawnv(), spawnve(), spawnvp(), spawnvpe().  *
nice().  * sigpending(), sigsuspend() * Under NT only, chown(),
getgrgid(), getgrnam(), endgrent(), getgrent(), setpwend(), getpwent(),
endpwent().  Win95 still has these as stubs.

   Significantly better signals / exception handling support added.
The kill signal works much better now (control-C works in bash).

   Shell scripts now run the shell specified after the #! instead of
always defaulting to /bin/sh.

   Floating point registers are now properly initialized in the crt0.o.

   Opening non-disk files such as com ports no longer check to see if
they are symlinks or executables.

   The console title now is set to the name of the running process.

   Winsock is now initialized upon app startup.

   Moved reent_data from private address space to cygwin.dll.

   The system() call now invokes spawnvp() instead of fork()/exec().

   Support for NT extended attributes has been added but is disabled
for now because it slowed things down too much.  We want to use them to
remember info about symlink and executable status of files.

   Under NT only, utilities mkpasswd and mkgroup can generate a valid
/etc/passwd and /etc/group.

   Earlier releases stored mount points in the registry under "Cygnus
Support".  This changed to "Cygnus Solutions" starting with beta 18.
Either use a registry editor (regedit under NT) to rename the old entry
or just redo your mount points and the cygwin.dll will automatically
create the new one for you.

   Mount points can now be up to MAX_PATH in length instead of 30
characters.

Contents
========

   The following packages are included in the full release:

   Cygnus Developer's Kit (CDK): binutils, byacc, diff, flex, gas, gcc,
gdb, ld, libg++, libstdc++, make, patch

   user tools: bash, fileutils, findutils, gawk, grep, gzip, m4, sed,
shellutils, tar, textutils, time

   Full source code is available for these tools.  It is split into
these two units.

Installing the binary release:
==============================

   First, remove any older versions of the gnu-win32 tools that exist
in your $PATH (or delete them).

   Connect to our ftp server and cd to the following directory:
`ftp://ftp.cygnus.com/pub/gnu-win32/latest'.

If you want the development tools...
------------------------------------

   If you want the development tools and the programs necessary to run
the GNU configure mechanism, you should download the whole release.

   Download `cdk.exe'.

   If you have an unreliable connection, download the binary in smaller
chunks instead.  For the split cdk installer, get the files in the
`cdk-split' subdirectory.  Once downloaded, combine the split files at
the command prompt by doing a:

     copy /b xaa + xab + xac + ... + xag + xah cdk.exe
     del xa*.*

   Run `cdk.exe' and follow the instructions to install the tools.  The
default install location is `<systemdrive>:\gnuwin32\b18'.  Future
examples will assume this location with <systemdrive> being the C drive.

   Next you must set four gnu-win32-related environment variables or the
tools will not function correctly.  You may prefer to do this outside
of bash so you can use the tools from the command.com as well as from
within bash.  This means using the `System' control panel in NT or
modifying the autoexec.bat under Windows 95.

   Assuming the `C:\gnuwin32\b18' install location:

   1) Set the GCC_EXEC_PREFIX environment variable to

   	`C:\gnuwin32\b18\H-i386-cygwin32\lib\gcc-lib\'

   The trailing slash is important!

   2) Add

   	`C:\gnuwin32\b18\H-i386-cygwin32\bin;C:\gnuwin32\b18\tcl\bin'

   to your $PATH.  This is where the executables live.

   3) Set the TCL_LIBRARY environment variable to

   	`C:/gnuwin32/b18/tcl/lib/tcl7.6'

   You must use forward slashes in this variable.

   4) Set the GDBTK_LIBRARY environment variable to

   `C:/gnuwin32/b18/share/gdbtcl'

   You must use forward slashes in this variable.

   Various programs need to be able to find `/bin/sh'.  You should
create a `/bin' if one doesn't already exist and put a copy of `sh.exe'
there.  You can use the `mount' utility to select which drive letter is
mounted as `/'. See the Frequently Asked Questions (FAQ) file for more
information on `mount'.

   Many programs including bash and byacc need to be able to find a
`/tmp'.  Verify that `/tmp' exists on the drive mounted as `/',
creating one if necessary.

   And you should be done!

   If you should ever want to uninstall the tools, you may do so via
the "Add/Remove Programs" control panel.

If you're not interested in the development tools...
----------------------------------------------------

   If you just want bash, fileutils, textutils, and other utilities and
don't need the development tools, you do NOT need to install the entire
release.

   Download `usertools.exe'.

   If you have an unreliable connection, download the binary in smaller
chunks instead.  For the split user tools installer, get the files in
the `usertools-split' subdirectory.  Once downloaded, combine the split
files at the command prompt by doing a:

     copy /b xaa + xab + xac + xad + xae usertools.exe
     del xa*.*

   Run `usertools.exe' and follow the instructions to install the tools.
The default install location is `<systemdrive>:\gnuwin32\b18'.  Future
examples will assume this location with <systemdrive> being the C drive.

   Next you need to add the executables to your $PATH.  You may prefer
to do this outside of bash so you can use the tools from the
command.com as well as from within bash.  This means using the `System'
control panel in NT or modifying the autoexec.bat under Windows 95.

   Assuming the `C:\gnuwin32\b18' install location, add

   	`C:\gnuwin32\b18\H-i386-cygwin32\bin'

   to your $PATH.

   Various programs need to be able to find `/bin/sh'.  You should
create a `/bin' if one doesn't already exist and put a copy of `sh.exe'
there.  You can use the `mount' utility to select which drive letter is
mounted as `/'. See the Frequently Asked Questions (FAQ) file for more
information on `mount'.

   Many programs including bash need to be able to find a `/tmp'.
Verify that `/tmp' exists on the drive mounted as `/', creating one if
necessary.

   And you should be done!

   If you should ever want to uninstall the tools, you may do so via
the "Add/Remove Programs" control panel.

Installing the source code
--------------------------

   Before downloading the source code corresponding to the release, you
should install the latest tools (either the full release or just the
user tools).

   Create the directory that will house the source code.  `cd' there.

   Connect to our ftp server and cd to the following directory:
`ftp://ftp.cygnus.com/pub/gnu-win32/latest'.  If you want the user
tools source code, `cd' into the `usertools-src' subdirectory.
Download the files there.  If you want the Cygnus Developer's Kit
sources, `cd' into the `cdk-src' subdirectory.  Download the files
there.

   Back in the command.com, for the user tools source:

     copy /b xba + xbb + xbc + xbd + ... + xbk + xbl usersrc.tar.gz
     del xb*.*
     gunzip -d usersrc.tar.gz
     tar xvf usersrc.tar

   For the compiler tools source:

     copy /b xca + xcb + xcc + xcd + ... + xck + xcl cdksrc.tar.gz
     del xc*.*
     gunzip -d cdksrc.tar.gz
     tar xvf cdksrc.tar

   Both will expand into a directory called `src'.

   And you should be done...

Cygnus resources online
***********************

   The main WWW page for the GNU-Win32 project is:

   	http://www.cygnus.com/misc/gnu-win32/

   Tool-specific information can be found here:

   http://www.cygnus.com/library/

   Links to additional documentation are accessible from the main web
page.

Known/potential problems
************************

Fixed-length arrays in the dll
==============================

   There are still a lot of places in the dll where fixed-length arrays
are used instead of dynamic structures which makes us use more memory
than necessary or limits the capabilities of the Cygwin32 layer.  Some
of these have been fixed since beta 16.

Missing POSIX functions
=======================

   There's still a lot of standard posix functionality that isn't
present that could be.   Also, some functions aren't implemented fully.
For example, sync returns 0, even though it doesn't do much.  We're
filling in the gaps slowly but surely.

Programs can't deal with // pathname scheme in arguments
========================================================

   gcc and other tools aren't fully compatible with the current pathname
scheme: it can't grok an argument of -I//d/foo which means it is vital
that when attempting to self-host, that only normal paths with single
slashes are used.

DOS special filenames
=====================

   Files cannot be named com1, lpt1, or aux (to name a few); either as
the root filename or as the extension part.  If you do, you'll have
trouble.  Unix programs don't avoid these names which can make things
interesting.  Eg, the perl distribution has a file called `aux.sh'.
The perl configuration tries to make sure that `aux.sh' is there, but
an operation on a file with the magic letters 'aux' in it will hang.

User defined mallocs.
=====================

   If you define a function called `malloc' in your own code, and link
with the DLL, the DLL *will* call your `malloc'.  You'd better make
sure that your malloc more or less works.

   If you run any programs from the DOS command prompt, rather than
from in bash, the DLL will try and expand the wildcards on the command
line.  This process uses `malloc' *before* your main line is started.
If you have written your own `malloc' to need some initialization to
occur after `main' is called, then this will surely break.

Mixed case filenames.
=====================

   The perl config causes some other problems too; the config<foo>.SH
scripts generate a file called "Makefile", and use and delete a file
called "makefile" on the way.  Because of NT's case insensitivity, this
will nuke Makefile, leaving you with nothing.  You can fix this by
mounting with the 'mixed' option.

Question and Answers
********************

Where can I get the tools?
==========================

   The main ftp site is `ftp://ftp.cygnus.com/pub/gnu-win32'.  There
are also several mirrors:

   `' Austria: `ftp://gd.tuwien.ac.at/pub/gnu/gnu-win32'

   `' France: `ftp://ftp.fwntug.org/gnu'

   `' Japan: `ftp://ftp.crl.go.jp/pub/GNU/cygnus/gnu-win32'

   `' Slovenia: `ftp://sunsite.fri.uni-lj.si/pub/gnu-win32'

   `' Spain: `ftp.rediris.es/mirror/gnu-win32'

   `' UK: `ftp://sunsite.doc.ic.ac.uk/packages/gnu/cygnus/gnu-win32'

Where's the documentation?
==========================

   There are links to quite a lot of it on the main gnu-win32 WWW page:
`http://www.cygnus.com/misc/gnu-win32/' Be sure to at least read the
Release Notes on the main WWW page, if there are any.

   Tool-specific information can be found here:
`http://www.cygnus.com/library/'

How can I get on the gnu-win32 mailing list?
============================================

   You can get on the gnu-win32 mailing list by sending mail to
gnu-win32-request@cygnus.com

   with a message body of:

             subscribe gnu-win32  <your-email-address-here>

   where <your-email-address-here> is your email address.

   You can get off the mailing list by sending mail to

   gnu-win32-request@cygnus.com

   with a message body of:

             unsubscribe gnu-win32 <your-email-address-here>

   There's an archive of the mailing list in

   `http://www.cygnus.com/ml/gnu-win32'

   Because the archive program we're using is really flaky, we've had
problems keeping this up to date.  This is something we are going to
fix one of these days.  Sorry for the inconvenience...

Why is gcc failing?
===================

   If the error is "gcc: installation problem, cannot exec `cpp': No
such file or directory", you haven't set your GCC_EXEC_PREFIX
environment variable correctly.  If this your problem, you should go
read the README.txt that accompanied this release since there are other
things like creating /tmp that you may not have done either.

Help! I haven't created /tmp and tools are behaving strangely!
==============================================================

   Many Unix tools (bash, byacc, etc.) expect that /tmp always exists.
This is not guaranteed in Win32 land.  You should create /tmp or "mount"
the directory of your choice to /tmp.

Why does bash spew out "49054596: No such file or directory"?
=============================================================

   Are you sure you created a /tmp?  As of beta 18, bash will warn if
it doesn't find a /tmp.

GDB from beta 18 won't run!  What's wrong?
==========================================

   If the error says "Tcl_Init failed: Can't find a usable init.tcl...",
then your TCL_LIBRARY environment variable is probably set wrong.  If
you installed the distribution in c:\gnuwin32\b18, TCL_LIBRARY should
be set to C:/gnuwin32/b18/tcl/lib/tcl7.6 with all forward slashes.

   If the error says "Unable to find main.tcl...", your GDBTK_LIBRARY
environment variable isn't a valid path.  If you installed the
distribution in c:\gnuwin32\b18, GDBTK_LIBRARY should be set to
C:/gnuwin32/b18/share/tcl with all forward slashes.

   If the error says something like "invalid command name
'create_command_window'", your GDBTK_LIBRARY environment variable
probably contains backslashes instead of all forward slashes.

Where did my mount points go?
=============================

   Earlier releases stored mount points in the registry under "Cygnus
Support".  This changed to "Cygnus Solutions" starting with beta 18.
Either use a registry editor (regedit under NT) to rename the old entry
or just redo your mount points and the cygwin.dll will automatically
create the new one for you.

Why aren't man, less, bison, etc. included in the betas?
========================================================

   For obvious reasons, it isn't feasible for us to maintain and provide
binary distributions of every tool ported to work with the Cygwin32
tools.  Instead I think Cygnus should concentrate its efforts on the
core development tools.  Perhaps V or wxwin should count?  It's likely
that less and a man command will get added once we get them working to
our satisfaction.

   Other tools that have been ported should have their changes added to
the official releases so they can be compiled straight from normal
sources for that tool.  In cases where that isn't possible, someone
else (possibly Cygnus if that made sense) could maintain the diffs and
have them up for ftp.  Maybe we could keep a list of such tools on the
gnu-win32 Web site...

Where I can I find "which"?
===========================

   While we don't include a which command, you can use the bash built
in "type" command which does something fairly similar.

Why does bash say "foo: command not found"
==========================================

   It can't find the command.  Either you spelled the name of the
command wrong or the command in not your path.

Bash says that it can't vfork (or just hangs) - why ?
=====================================================

   Most often this is because it can't find itself in the path.  Make
sure that your path includes the directory where bash lives, before you
start it.  Also make sure you have a copy of bash installed as
/bin/sh.exe.

   If you get errors like 'no such file or directory' when you're trying
to run a shell script, which you know is there, then your problem
probably that bash can't find `/bin/sh'.

How does everything work?
=========================

   There's a C library which provides a Unix-style API.  The
applications are linked with it and voila - they run on Windows.

   The aim is to add all the goop necessary to make your apps run on
Windows into the C library.  Then your apps should run on Unix and
Windows with no changes at the source level.

   The C library is in a DLL, which makes basic applications quite
small.  And it allows painless upgrades to the Win32/Unix translation
layer, providing that dll changes stay backward-compatible.

How can I make a GUI app?
=========================

   While some libraries like the Cygwin32 porting library and kernel32
libraries are included by default, you may need to add additional ones
to the link line if you use anything but the most common Win32 API
calls.  Following is a list of additional Win32 libraries we provide:

   advapi32  largeint  ole32     scrnsave  vfw32 cap       lz32
oleaut32  shell32   win32spl comctl32  mapi32    oledlg    snmp
winmm comdlg32  mfcuia32  olepro32  svrapi    winserve ctl3d32
mgmtapi   opengl32  tapi32    winspool dlcapi    mpr       penwin32
th32      winstrm gdi32     msacm32   pkpd32    thunk32   wow32 glaux
 nddeapi   rasapi32  url       wsock32 glu32     netapi32  rpcdce4
user32    wst icmp      odbc32    rpcndr    uuid imm32     odbccp32
rpcns4    vdmdbg kernel32  oldnames  rpcrt4    version

   Finally, to prevent the console window from showing up, add the
string "-Wl,-subsystem,windows" to the GCC commandline.

Why can't we redistribute Microsoft's Win32 headers?
====================================================

   Section 2.d.f of the `Microsoft Open Tools License agreement' looks
like it says that can not "permit further redistribution of the
Redistributables to their end users".  We take this to mean that we can
give them to you, but you can't give them to anyone else, which is
something that Cygnus can't agree to.  Fortunately, we have our own
Win32 headers which are pretty complete.

How do I set /etc up?
=====================

   If you want a valid /etc set up (so "ls -l" will display correct
user information for example) and if you are running NT (preferably
with an NTFS file system), you should just need to create the /etc
directory on the filesystem mounted as / and then use mkpasswd and
mkgroup to create /etc/passwd and /etc/group respectively.  Since
Windows 95's Win32 API is less complete, you're out of luck if you're
running Windows 95!

How do I rebuild the tools on my NT box?
========================================

   Assuming that you have the src installed as /src, will build in the
directory /obj, and want to install the tools in /install:

     bash
     cd /obj
     /src/configure --prefix=/install -v > configure.log 2>&1
     make > make.log 2>&1
     make install > install.log 2>&1

How do you share files between Unix and NT?
===========================================

   During development, we have both Unix boxes running Samba and
NT/Windows 95 dual-boot machines.  We often build with cross-compilers
under Unix and copy binaries and source to the NT/Win 95 system or just
toy with them directly off the Samba-mounted partition.  While the
tools should work fine with NTFS, we usually use the FAT filesystem so
we can also access the files under Windows 95.

How is the Cygwin32 fork() implemented?
=======================================

   Cygwin32 fork() essentially works like a non-copy on write version
of fork() (like the old Unix versions used to do).  Because of this it
can be a little slow.

   Here's how it works as of beta 18:

   Parent initializes a space in the Cygwin process table for child.
Parent creates child suspended using Win32 CreateProcess call, giving
the same path it was invoked with itself.  Parent calls setjmp to save
its own context and then sets a pointer to this in the Cygwin32 shared
memory area (shared among all Cygwin32 tasks).  Parent fills in the
childs .data and .bss sections by copying from its own address space
into the suspended child's address space.  Parent then starts the
child.  Parent waits on mutex for child to get to safe point.  Child
starts and discovers if has been forked and then longjumps using the
saved jump buffer.  Child sets mutex parent is waiting on and then
blocks on another mutex waiting for parent to fill in its stack and
heap.  Parent notices child is in safe area, copies stack and heap from
itself into child, releases the mutex the child is waiting on and
returns from the fork call.  Child wakes from blocking on mutex,
recreates any mmaped areas passed to it via shared area and then
returns from fork itself.

How does wildcarding (globbing) work?
=====================================

   If an application using CYGWIN.DLL starts up, and can't find the
`PID' environment variable, it assumes that it has been started from
the a DOS style command prompt.  This is pretty safe, since the rest of
the tools (including bash) set PID so that a new process knows what PID
it has when it starts up.

   If the DLL thinks it has come from a DOS style prompt, it runs a
`globber' over the arguments provided on the command line.  This means
that if you type `LS *.EXE' from DOS, it will do what you might expect.

   Beware: globbing uses `malloc'.  If your application defines
`malloc', that will get used.  This may do horrible things to you.

How can I access other drives?
==============================

   As of beta 16, you can refer to random drive letters in your paths.
To do an "ls" on drive letter a:, do the following:

     bash$ ls //a/

   Or you can use the "mount" command to mount it so you can refer to
it with only single slashes:

     bash$ mount a:/ /mnt/floppy
     bash$ ls /mnt/floppy
     ....

   If you want to write to the raw device, then use `/dev/fd0' for
drive A or `/dev/fd1' for drive B.

   e.g.
     bash$ tar cf /dev/fd0 *.exe
     bash$ tar tvf /dev/fd0
     ....

   Note that you can also access UNC paths in the standard way.
Because of the drive letter shortcut mentioned above, machine names in
UNC paths must be more than one character long.

How can I get at other disks?
=============================

   You can mount them using the 'mount' command.  Eg, to get to a share

     $ mount i:/a /a
     $ mount
     i:\a on /a type dos (normal)
     c:\ on / type dos (normal)

   This is done with textual substitution whenever a file is opened.
So if you're going to do `ls /a/bar' on a mount like the above the guts
will turn that into `ls i:/a/bar'.

   Note that you only need to mount drives once.  The mapping is kept
in the registry so mounts stay valid pretty much indefinitely.  You can
only get rid of them with umount (or the registry editor).

   The '-m' option tells mount that you want to enable the mixed case
filename mode.  The '-b' option mounts in binary mode.

   If you want to put the release onto a drive that's not drive 'C',
then you *have* to use the `mount' command if you want to make progress.

   Eg, assume that you've installed the tree into `f:/fish', so that
the binaries live in `f:/fish/bin' etc.
     $ mount f:/fish /usr
   This means that when you type `ls /usr/bin', CYGWIN.DLL will look in
`f:/fish/bin'.

Are mixed-case filenames possible with GNU-Win32?
=================================================

   Several Unix programs expect to be able to use to filenames spelled
the same way, but with different case.  A prime example of this is
perl's configuration script, which wants `Makefile' and `makefile'.
WIN32 can't tell the difference between files with just different case,
so the configuration fails.

   While we don't currently recommend using this feature, you can get
round this if you enable the 'mixed' mount attribute.

   When this is enabled, cygwin32 will put a '^' sign in filenames
where the case changes. You could create `Foo' and `FOO', and in the
the files `^f^oo' and `^foo' will be in the directory behind the
curtain.

   How these things are named behind the scenes isn't a problem if you
live your life inside an application written on top of cygwin32, but if
you want to move between cygwin32 and 'real life', you may be better
off not enabling this switch.

   If you install the stuff with the switch disabled, and then enable
it, you won't be able to do some things.  E.g., if you have
`/usr/include/_G_config.h' and then turn on mixed case pathnames in
that directory, you'll won't be able to get to `_G_config.h' anymore.
This is because when you ask for `_G_config.h', cygwin32 will turn that
into a request for `_^G_^config.h', which doesn't exist.

   You can get around this by mounting two directory trees, one 'mixed'
and one not, and juggling the files around.  However, it probably isn't
worth the pain.

How do I build a DLL?
=====================

   There's documentation that explains the process on the main gnu-win32
project web page (http://www.cygnus.com/misc/gnu-win32).

My old gnu-win32 programs don't work!
=====================================

   Sorry, that's just the way it is.  There is a dependency between the
DLL and the crt0.o which is linked into every gnu-win32 application.
That interface doesn't change too often, but when it does everything
should be relinked.  As the gnu-win32 tools age, changes that require
relinking should become less and less common.  Programs built with the
beta 16 and 17 releases will most likely continue to function as
expected with the beta 18 cygwin.dll.

Why did we change the preprocessor defines in beta 16?
======================================================

   They were too confusing and very well defined prior to this release.
Now there's _WIN32 for access to the Win32 API and __CYGWIN32__ for
access to the cygwin32 environment provided by the dll.

   We chose _WIN32 because this is what Microsoft defines in VC++ and
we thought it would be a good idea for compatibility with VC++ code to
follow their example.  We use _MFC_VER to indicate code that should be
compiled with VC++.

When it hangs, how do I get it back?
====================================

   Sometimes the tools will just stop, (easy to do if you try and read a
file called aux.sh).  To get your world back, hit ^C to return to bash
or the cmd prompt.

   If you start up another shell, and applications don't run, it's a
good bet that the hung process is still running somewhere.

   If you have pview, fire it up and kill it. (if it's the aux thing,
then the app might well be cp).  If you don't have pview or an
equivalent then you'll probably have to log out.

How is the DOS/Unix CR/LF thing handled?
========================================

   By default, tools that deal with binaries (e.g. objdump) operate in
unix binary mode and tools that deal with text files (e.g. bash)
operate in text mode.

   You can enable the DOS CR/LF end of line in a text file mode by
setting fmode_binary setting in the registry to 0.  I've tried to keep
the file types 'natural'.  By default a file is opened in text mode.
This can be changed by adding `O_BINARY' to the second argument of an
`open' call, or `"b"' to second argument of an `fopen' call.

   `lseek' now only works in binary mode.

How do I make files with base relocations?
==========================================

   LD is able to generate the reloc information, but it doesn't do it
by default.  With the current scheme, it would require another pass by
dlltool and the linker, and will always make images bigger.

   If you want reloc info, you'll have to do something like:

     gcc -o foo.o foo.c
     gcc -o bar.o bar.c
     
     ld -s -o foo.jnk --base-file foo.base foo.o bar.o
     dlltool --dllname foo.exe --base-file foo.base --output-exp foo.exp
     ld -s -o foo.exe foo.o bar.o foo.exp

   The first link is just enough to work out where the relocs will be
needed, and puts the list into foo.base.  Then dlltool will read this
and generate foo.exp, which contains the reloc data. The second link
will tie it all together again.

How can I debug what's going on?
================================

   You can debug your application using GDB.  (Make sure you compile it
with the -g flag!)  If the problem is inside the cygwin.dll, then you
can  `set strace=1', and get a whole load of debug stuff on your screen
when a app runs.  `strace' is a bit map - a value of 1 turns everything
on, `4' enables system call printing, etc etc (look in
`winsup/include/sys/strace.h' for more info.

   If you're running bash, then you can `export STRACE=1', and see
verbose syscall-like output that is helpful in tracking down bugs in
the cygwin.dll.

How do symbolic links work?
===========================

   CYGWIN.DLL generates link files with a magic header.  When you open
a file or directory that is a link to somewhere else, it opens the file
or directory listed in the magic header.

The linker complains that it can't find something.
==================================================

   A common error is to put the library on the command line before the
thing that needs things from it.

   This is wrong `gcc -lstdc++ hello.cc'.  This is right `gcc hello.cc
-lstdc++'.

I use a function I know is in the API, but I still get a link
=============================================================

   error.

   The function probably isn't declared in the header files, or the
UNICODE stuff for it isn't filled in.

Can you make dll's that are linked against libc ?
=================================================

   Yes.

Why do some files, which are not executables have the 'x' type.
===============================================================

   When working out the unix-style attribute bits on a file, the library
has to fill out some information not provided by the WIN32 API.

   It guesses that files ending in .exe and .bat are executable, as are
ones which have a "#!" as their first characters.

Why won't you/the mailing list answer my questions?
===================================================

   Perhaps your question has an answer that's already in the FAQ.
Perhaps nobody has time to answer your question.  Perhaps nobody knows
the answer...

How do the net-related functions work?
======================================

   The network support in cygwin32 is supposed to provide the Unix API,
not the winsock API.

   There are differences between the semantics of functions with the
same name under the API.

   E.g., the select system call on Unix can wait on a standard file
handles and handles to sockets.  The select call in winsock can only
wait on sockets.  Because of this, cygwin.dll does a lot of nasty stuff
behind the scenes, trying to persuade various winsock/win32 functions
to do what a Unix select would do.

   If you are porting an application which already uses winsock, then
using the net support in cygwin32 is wrong.

   But you can still use native winsock, and use cygwin32.  The
functions which cygwin.dll exports are called 'cygwin32_<name>'.  There
are a load of defines which map the standard Unix names to the names
exported by the dll - check out include/netdb.h..

     ..etc..
     void		cygwin32_setprotoent (int);
     void		cygwin32_setservent (int);
     void		cygwin32_setrpcent (int);
     ..etc..
     #ifndef __INSIDE_CYGWIN_NET__
     #define endprotoent cygwin32_endprotoent
     #define endservent cygwin32_endservent
     #define endrpcent  cygwin32_endrpcent
     ..etc..

   The idea is that you'll get the Unix->cygwin32 mapping if you include
the standard Unix header files.  If you use this, you don't need to
link with libwinsock.a - all the net stuff is inside the dll.

   There is no need for a your-app->winsock mapping, just include
winsock.h (which isn't in the distribution - sorry) and link against
libwinsock.a.

   The mywinsock.h file is a standard winsock.h which I've hacked to
remove the bits which conflict with the standard Unix API, or are
defined in other headers.  E.g., in mywinsock.h, the definition of
struct hostent is removed.  This is because on a Unix box, it lives in
netdb.  It isn't a good idea to use it in your applications.

Why the weird directory structure?
==================================

   Why are cpp.exe, cc1.exe, etc., not in the bin directory?

   Why more than one lib and include directory?
H-i386-cygwin32\lib\gcc-lib\...\cygnus-2.7.2-960712\include
x86-cygwin32\include x86-cygwin32\H-i386-cygwin32\i386-cygwin32\include

   This way multiple releases for different hosts and targets can all
coexist in the same tree.  H-i386-cygwin32 means hosted on
i386-cygwin32, common files shared by all hosts are in the top level
directories, target-specific files are in the
H-i386-cygwin32/i386-cygwin32 directory, etc...

   If you had a server sharing files to a ppc NT machine and an x86 NT
machine, you could have both an H-i386-cygwin32 and an
H-powerpcle-cygwin32 directory without having to duplicate the top level
files that are the same for both hosts.  If you built and installed an
i386-cygwin32 x m68k-coff cross-compiler (I'm not sure if this is
possible yet, just an example), you would have an
H-i386-cygwin32/m68k-aout with its target-specific files and some
m68k-aout- prefixed binaries in H-i386-cygwin32/bin.

   Normally we also have another higher level directory that identifies
the release.  If/when multiple gnuwin32 releases can coexist with
different dll versions, you might have gnuwin32/b16/H-i386-cygwin32
gnuwin32/b17/H-i386-cygwin32 ...

   In any case, this does add complexity to the directory structure but
it's worth it for people with more complex installations.

Can I mix objects compiled with msvc++ and gcc?
===============================================

   Yes, this supposedly works.  The key seems to be using MS's LINK.EXE
to do the linking instead of GNU ld.  There may be issues with
constructor calls for C++/Obj C.

Where can I find the random and srandom functions?
==================================================

   Although these are not included in the cygwin.dll, they are included
in the libiberty library available from the standard GNU ftp sites.

Shell scripts aren't running properly from my makefiles?
========================================================

   You need to have . (dot) in your $PATH.  You should NOT need to add
/bin/sh in front of each and every shell script invoked in your
Makefiles.

Are GNU-WIN32 and CYGWIN32 deliberately lame names?
===================================================

   We're trying to phase out GNU-WIN32 in the source, because of two
pretty good reasons - a) it's not all GNU code and b) it doesn't
present a WIN32 API.

   We're using cygwin32 as the configuration cookie for the moment.
But this may be changed if a better name becomes available.

   There is some logic in this naming scheme.  The entire suite of tools
is referred to as 'gnu-win32', and the library/API which they run on is
the Cygwin32 API.  One day, someone else may write some more code - for
example, maybe 'bsd-win32'.  It would still run on top of the Cygwin32
API.

What is V?
==========

   (excerpted from `http://www.cs.unm.edu/~wampler/aboutv.html')

   V is a portable C++ GUI Framework intended to develop a wide variety
of applications on different graphical interface platforms. While it is
probably not suitable for developing state-of-the art commercial
applications with all the latest interface components, it is very
complete and suitable for a large majority of custom GUI applications.
Applications developed using V will have the look and feel of the native
platform, yet will be portable across platforms.

   Most standard GUI objects are supported by V, including windows with
menus, status bars, tool bars, and a drawing canvas; modal and modeless
dialogs with the most common controls (buttons, lists, labels, text
entry, check and radio buttons, etc.); and portable printing support.

   ...

   V is also an excellent tool for developing many custom applications.
It is a suitable tool for research labs, small custom software shops,
engineering firms, or individuals that need to develop an application
that needs a graphical user interface, especially for multiple
platforms. Because of its design, V is far easier to learn and use than
the native GUI tool kits. It is also easier to learn than larger
frameworks such as MFC or OWL.  Since it is freeware, licensed under the
GNU Library General Public License, it will always be available with its
source code for public use.

   For more information, please check out the V WWW page at
`http://www.cs.unm.edu/~wampler/vgui/vgui.html'.

Why not use DJGPP ?
===================

   DJGPP is a similar idea, but for DOS instead of Win95 and Windows NT.
DJGPP uses a "DOS extender" to provide a more reasonable operating
interface for its applications.  GNU-WIN32 doesn't have to do that as
all the applications are native WIN32.   GNU-WIN32 can call all the
Win32 API functions, so you can write programs which use the Windows
GUI.  Perhaps one day GNU-WIN32 will run on the Alpha and MIPS
processors as well.

   You can get more info on DJGPP by following `http://www.delorie.com'.

Who's behind the project?
*************************

   I'm Geoff Noer (noer@cygnus.com).  I'm the current maintainer of the
Cygwin32 API library, manage the public beta builds and such.  I try to
be as responsive as possible and deal with patches and questions as I
get them, but realistically it's just not possible for me to answer all
of my email.  Making net releases ofthe win32 stuff and helping out
isn't my primary job function, so some things will just never be
answered.  Sorry.

   Steve Chamberlain (sac@transmeta.com) wrote most of the original
win32-specific code for the project.  He did the releases up to beta
14, ported many of the other gnu tools to work on NT, ported V to work
with the gnu-win32 tools, etc.

   Jeremy Allison (jra@cygnus.com) has made significant more recent
contributions in the area of file handling and process control, rewrote
select from scratch, and has probably made several other useful changes
by the time you read this.

   Doug Evans (dje@cygnus.com) has spent many long hours rewriting the
path-handling code in beta 16 and fixing countless other problems.
Jason Molenda and Mark Eichin have also made many important
contributions.

   Kim Knuttila and Michael Meissner have put in long hours working on
the PowerPC port.

   Also many thanks to everyone using the tools for their many
contributions in the form of advice, bug reports, and code fixes.  We do
appreciate it!

   Commercial sites can buy support from Cygnus for the native GNU-Win32
tools and for cross-compilers hosted under NT/Win 95.  Send mail to
info@cygnus.com for more information.

History
*******

   `' Release Beta 18 (May 6 1997)

     This is a major release.  The new cygwin.dll is still
     backwards-compatible with previously linked applications but
     contains significant changes.

     We have completely changed the installation process to make use of
     an InstallShield5-based installer.  This should reduce the number
     of installation problems people have experienced in the past.
     However, it is still necessary to set environment variables by
     hand, as explained in the README.txt accompanying the distribution.
     (Future gnu-win32 installers may include the capability to do this
     automatically).

Changes in specific tools:
--------------------------

     GCC compilation times have been improved by 20-30% by using spawn()
instead of fork().

     GCC accepts both Win32 and POSIX paths/path lists in its
environment variables (COMPILER_PATH, LIBRARY_PATH, C_INCLUDE_PATH,
CPLUS_INCLUDE_PATH, OBJC_INCLUDE_PATH)

     GDB comes with a tcl/tk-based GUI (gdbtk).  You can still invoke
the command line gdb by invoking it with "gdb -nw".

     Bash verifies that /tmp exists and is a directory upon startup.
It complains if this isn't the case.

     Running gcc or ld with "-s" used to create invalid executables.
The bug in bfd that was responsible for this has been fixed.

     The conflict between String.h and string.h (and other such pairs
of header files) where you include one and get the other has been fixed.

     The top level install-sh script tries to install foo.exe if asked
to install foo when foo's not present.  This fixes many installs of
Unix software.

     Dlltool has preliminary support for the IMPORT declaration in .def
files when invoked with -I.  Feel free to experiment with it but once
this functionality is tested more extensively this flag may go away.

     Time is upgraded to version 1.7.

     Make is upgraded to version 3.75.

     Make accepts both Win32 and POSIX path lists in the VPATH variable.

Changes in the Cygwin32 API (cygwin.dll):
-----------------------------------------

     The following is now supported:

     * UNC paths * Reverse index escapes in console code * Blocking
select()s on a combination of sockets/handles * Directory symlinks.  *
Reparenting of child processes.

     The following calls have been added:

     * mmap(), mprotect(), msync(), munmap().  fork() changed to
support these.  * fsync(), statfs(), fstatfs().  * getprotobynumber()
and getservbyport().  * get_osfhandle(), cwait().  * spawnl(),
spawnle(), spawnlp(), spawnlpe(), spawnv(), spawnve(), spawnvp(),
spawnvpe().  * nice().  * sigpending(), sigsuspend() * Under NT only,
chown(), getgrgid(), getgrnam(), endgrent(), getgrent(), setpwend(),
getpwent(), endpwent().  Win95 still has these as stubs.

     Significantly better signals / exception handling support added.
The kill signal works much better now (control-C works in bash).

     Shell scripts now run the shell specified after the #! instead of
always defaulting to /bin/sh.

     Floating point registers are now properly initialized in the
crt0.o.

     Opening non-disk files such as com ports no longer check to see if
they are symlinks or executables.

     The console title now is set to the name of the running process.

     Winsock is now initialized upon app startup.

     Moved reent_data from private address space to cygwin.dll.

     The system() call now invokes spawnvp() instead of fork()/exec().

     Support for NT extended attributes has been added but is disabled
for now because it slowed things down too much.  We want to use them to
remember info about symlink and executable status of files.

     Under NT only, utilities mkpasswd and mkgroup can generate a valid
/etc/passwd and /etc/group.

     Earlier releases stored mount points in the registry under "Cygnus
Support".  This changed to "Cygnus Solutions" starting with beta 18.
Either use a registry editor (regedit under NT) to rename the old entry
or just redo your mount points and the cygwin.dll will automatically
create the new one for you.

     Mount points can now be up to MAX_PATH in length instead of 30
characters.

   `' Release Beta 17.1 (Dec 10 1996)

     A patch has been applied to make Win 95 configure work again.

     ld has been changed to make "a.exe" be the default executable name.

   `' Release Beta 17 (Dec 7 1996)

     It is now possible to rebuild the tools natively under x86 NT when
     the full Cygnus Developers' Kit (CDK) and the User Tools are both
     installed correctly.

     While the cygwin.dll underwent substantial changes, none of them
     prevent you from using previously built applications  The new dll
     is compatible with beta 16 to the best of our knowledge.  Beta
     14-built programs will continue to fail with the beta 17 dll - you
     will have to relink them before they will work.

     The winsup files that make up the Cygwin32 API are now under the
     GNU General Public License.  See the accompanying press release
     for more information.

Changes in specific tools:
--------------------------

     Gcc now links by default against -lkernel32 and also against
-luser32 -lgdi32 -lcomdlg32 when mwindows is set.  Another major change
is that when creating an executable, gcc will now create foo.exe when
given a -o argument of foo.

     Dlltool has patches to make it better handle the -subsystem
argument that allows choosing console vs. GUI among other options.  ld
has been changed to have a much larger stack reserve size.  This is
necessary when rebuilding the toolchain natively under NT.

     The C++ headers can now be found given a correctly set
GCC_EXEC_PREFIX environment variable.

     New versions of fileutils and make are included.  Findutils has
been added.

Changes in the Cygwin32 API (cygwin.dll):
-----------------------------------------

     Scott Christley's headers and def files for the standard Win32 dlls
have been integrated.  Anything present only in the previous Cygnus
headers has been added in the appropriate places.  There are
placeholder files with the standard Win32 header names that pull in our
headers so programs that try to include specific headers should
continue to work.  Having more complete headers should make Win32
native programming easier.

     Select has been rewritten from scratch.  The new one can deal with
all sockets, handles and sockets always ready, all handles.  Handles
and sockets with timeout not implemented yet.  Select now does blocking
and doesn't spin cpu.

     File handling has been largely rewritten: The fhandler array has
been moved into local memory instead of shared memory.  This makes a
number of things behave better.  Lots of changes to support this.
There is now fairly complete ansi/vt100 console support.  Some new file
locking support has been added.  Arrow keys are now supported.

     Process handling much improved.

     Significant serious bugs in fork() fixed.

     The system() call now works.

     unlink() now chmods read-only files to writable before attempting
to delete a file.  This fixes the outstanding problem where rm can't
delete read-only files saying "out of queue slots" repeatedly.

     Text mode read has been rewritten.

     New syslog code allows logging to event log under NT, file under
Win 95.

     Symlinks are enabled.

     readv() and writev() have been written and exported.

     For MS compatibility, we now export functions in the dll as
_funcname in addition to funcname.  I would suggest not making use of
this fact unless you are building code that already accesses C library
calls in this way.

     Almost all of the source code is now in C++ files.

   `' Release Beta 16 (Aug 30 1996)

     Path handling has been completely rewritten.  To refer to drive Q:
     in bash, you can now refer to //q/.  Alternatively, type "mount Q:
     /q" to have drive Q: show up as /q.

     We now pass the Plum Hall positive C conformance tests on the i386
     under Windows 95 and NT 4.0b2.

     Fork was previously not accessible inside the dll.  This is no
     longer the case which should allow us to add working system and
     popen calls.

     getdomainname works (it used to just return "cygnus.com") by
     getting information from registry.

     Fixed readdir bug that set errno improperly.  This fixed the
     problem with diff not working across directories.

     Better error checking in signal functions.  Initialize winsock in
     cygwin32_socket with checkinit call (fixes bug that required
     calling any function that did this first).

     New functions: sigaddset, sigismember, sigfillset, sigemptyset.

     Removed extra underscores present in sysdef files.

     There is a now a major and a minor version number associated with
     the cygwin.dll.  The major number changes only when incompatible
     changes are made, the minor number changes when significant
     changes are made to the dll that don't require relinking of old
     apps.

     Changed value of HZ in include/sys/param.h to correct value of
     1000.  (Fixes bug people reported about "time sleep 5" returning
     50).

     Assorted exception handling fixes for both i386 and ppc processors.

     Assorted time-related fixes required for Cygnus Kerberos work.
     New time functions: gmtime, corelocaltime

     Assorted spawn and fork fixes.

     Pseudo-Unix process handling added - new ps and kill commands added

     Control-Z's are now handled as a valid EOF token in files opened as
     text.  lseek now always operates in binary mode.

     Select revamped.

     Various other changes.  For more detailed information, consult the
     file in the source code winsup/ChangeLog.

     Preprocessor define scheme changed.  Apps should now use _WIN32
     instead of __WIN32__ to check for access to Win32 API and
     __CYGWIN32__ to check for presence of the Cygwin32 environment.

     We are no longer including GNU findutils, GNU dbm, GNU bison, GNU
     less, ncurses, ftp, finger, rcl, cvtres, or V.  This may or may not
     change in the future.

     You must relink old apps you built with prior releases with the new
     cygwin.dll.

   `' Release Beta 14 (April 10 1996)

     Some bugs have been fixed.  GDBM and m4 are in the release.  GCC
     now uses the standard install directories for cc1 etc.

     A port of V to gnu-win32 is included.  You can now write graphics
     applications which will run on Unix or Windows unchanged.  Some
     parts of V work on the PPC too.

     If you call any programs from the standard DOS shell, then the DLL
     will expand all the wildcards (glob) found in the arguments on the
     command line.  So ls *.exe will do what you think it should, even
     if you're not in bash.

     ncurses and less are included. The DLL's emulation of a vt100
     isn't complete, so ncurses doesn't do all that it should. Hence
     less is more or less useless.  This can be fixed with a new DLL.
     (If you want to use something which uses curses, be sure to set
     your TERM and HOME envirionment variables)

     If you leave out main, then the libraries will try and call
     WinMain in the usual way.

     ^C works much better on Windows 95.  It's still not quite right,
     but at least most times it quits what you're doing, and most times
     doesn't crash your machine.

     You can start more than one concurrent bash session.

     Some networking support has been added.  Even though telnet.exe is
     provided, I know that it doesn't work, so please don't send me bug
     reports.

     You will have to relink your applications to go with the new DLL.

     The DLL is released in its own .zip file too, so you don't have to
     download a load of other stuff if you dont want to.

   `' Release Beta 13 (Feb 9 1996)

     You can change the default file mode from the registry.  Two
     resource tools included.  You can use filenames with the same
     spelling but different case.  Nasty bash hanging bug fixed.
     PowerPC tools released too.  You can get to raw floppy disks.

   `' Release Beta 12 (Jan 4 1996)

     You can call non- gnu-win32 applications from bash.  You can mount
     other directories using the `mount' command.  Minimal ANSI
     terminal emulation included.  Packages split into smaller and more
     logical lumps.  /d<name> mechanism gone.

   `' Release Beta 11

     Something broke on the way to the ftp site.

   `' Release Beta 10 (Dec 5 1995)

     You can pass environment variables around in bash.  Lots more
     stuff provided precompiled.  Diffs to standard FSF release
     provided.  It self hosts.  It supports symbolic links.  The
     directory layout has changed to be more unix like.  The way that
     you get to non-c drives is new - i:\foo.cc is now /di/foo.cc

     Nasty bug found and fixed in fork.  CPP will now search the
     directories you supply in env names.

   `' Release Beta 9

     I've put all of libc and libm into a shared library, This
     drastically reduces the size of some binaries.  eg, ls goes from
     82,949 bytes to 26,624.  "Hello World" is 2564 bytes long.  This
     is the first stage in greatly speeding up some of the stuff that's
     going on behind the curtain.

     Different processes communicate using shared memory.

     Some trivial use of the registry is made.

     DLLTOOL is now *much* faster.

     Some small problems have been fixed in the way that DLLs were
     layed out.

   `' Release Beta 8

     GDB works.

     GCC now emits debug info which can make **huge** executables
     Fortunately, strip works too.  More work has been done to make
     quoting work.  Simple termios support added to newlib.  Much nicer
     way of describing paths, eg //c/foo is c:\foo.

   `' Release Beta 7

     Works again on Win 95 (which is why -6 wasn't advertised)
     Permissions are faked better.  Source of demos available without
     having to ftp the entire win32 binary tree.

   `' Release Beta 6

     Can now generate DLLs, tiny demo included.  tcl, byacc, fileutils,
     diff, make included.

   `' Release Beta 5

     Bug preventing anything from running on recent versions of Win95
     fixed.

     vfork and exec oddities fixed.

     Import libraries are now really libraries and not just .o files.

     Debugging info stripped from images and libraries; it's just bloat
     until gdb works.

     I've filled in the four major import libraries.

     The win*.h files are now installed into <foo>/include rather that
     <foo>/include/sys, so more things will compile out of the box.

   `' Release Beta 4

     PE support is fixed. Programs run on NT 3.1, NT 3.5, NT 3.51 and
     Windows 95.

     You can build GUI programs.

     .DEF files for three other DLL's started.

     New GUI demo program.

     C library distinguishes between text and binary files consequently
     the text files generated by the tools have the familiar ^M at the
     end of the line which DOS likes so much.

     Doug Evans of Cygnus has added a load of fancy support for execve,
     opendir and various other cool things.

     Exception handling is better.

   `' Release Beta 3

     Was so long ago we don't remember.

What are the copyrights ?
*************************

The general idea
================

   Many of the utilities are covered by the GNU GPL, some of the other
utilities are public domain and others have a Berkeley style copyright.
These may not yet be entirely sorted out.  To cover the GNU GPL
`restrictions', the basic rule is if you give out any binaries, you must
also make the source available.

   You can charge to give out the binaries if you want to, but anyone
who gets the binaries must also have the opportunity to get the source.
They must also have the right to give the binaries and source to any one
else.

   The Cygwin32 API library found in the winsup subdirectory of the
source code is now also covered by the GNU GPL.  Since by default all
executables link against this library, programs compiled by the beta 17
tools will also have to be free software distributed under the GPL with
source code available to all.

   If you're going to mirror the ftp tree, there should be no problem at
all - just make sure that the source code is also available.  If you do
that, it would be good if you send mail to `noer@cygnus.com' so your
mirror will get added to the appropriate lists.

   If you're going to filter out some of the stuff (perhaps you just
intend to ship the PowerPC binaries, and not the i386 stuff) then that
would be fine too.

GNU GENERAL PUBLIC LICENSE
==========================

     		   GNU GENERAL PUBLIC LICENSE
     		      Version 2, June 1991
     
      Copyright (C) 1989, 1991 Free Software Foundation, Inc.
                               675 Mass Ave, Cambridge, MA 02139, USA
      Everyone is permitted to copy and distribute verbatim copies
      of this license document, but changing it is not allowed.
     
     			    Preamble
     
       The licenses for most software are designed to take away your
     freedom to share and change it.  By contrast, the GNU General Public
     License is intended to guarantee your freedom to share and change free
     software--to make sure the software is free for all its users.  This
     General Public License applies to most of the Free Software
     Foundation's software and to any other program whose authors commit to
     using it.  (Some other Free Software Foundation software is covered by
     the GNU Library General Public License instead.)  You can apply it to
     your programs, too.
     
       When we speak of free software, we are referring to freedom, not
     price.  Our General Public Licenses are designed to make sure that you
     have the freedom to distribute copies of free software (and charge for
     this service if you wish), that you receive source code or can get it
     if you want it, that you can change the software or use pieces of it
     in new free programs; and that you know you can do these things.
     
       To protect your rights, we need to make restrictions that forbid
     anyone to deny you these rights or to ask you to surrender the rights.
     These restrictions translate to certain responsibilities for you if you
     distribute copies of the software, or if you modify it.
     
       For example, if you distribute copies of such a program, whether
     gratis or for a fee, you must give the recipients all the rights that
     you have.  You must make sure that they, too, receive or can get the
     source code.  And you must show them these terms so they know their
     rights.
     
       We protect your rights with two steps: (1) copyright the software, and
     (2) offer you this license which gives you legal permission to copy,
     distribute and/or modify the software.
     
       Also, for each author's protection and ours, we want to make certain
     that everyone understands that there is no warranty for this free
     software.  If the software is modified by someone else and passed on, we
     want its recipients to know that what they have is not the original, so
     that any problems introduced by others will not reflect on the original
     authors' reputations.
     
       Finally, any free program is threatened constantly by software
     patents.  We wish to avoid the danger that redistributors of a free
     program will individually obtain patent licenses, in effect making the
     program proprietary.  To prevent this, we have made it clear that any
     patent must be licensed for everyone's free use or not licensed at all.
     
       The precise terms and conditions for copying, distribution and
     modification follow.
     
     		    GNU GENERAL PUBLIC LICENSE
        TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION
     
       0. This License applies to any program or other work which contains
     a notice placed by the copyright holder saying it may be distributed
     under the terms of this General Public License.  The "Program", below,
     refers to any such program or work, and a "work based on the Program"
     means either the Program or any derivative work under copyright law:
     that is to say, a work containing the Program or a portion of it,
     either verbatim or with modifications and/or translated into another
     language.  (Hereinafter, translation is included without limitation in
     the term "modification".)  Each licensee is addressed as "you".
     
     Activities other than copying, distribution and modification are not
     covered by this License; they are outside its scope.  The act of
     running the Program is not restricted, and the output from the Program
     is covered only if its contents constitute a work based on the
     Program (independent of having been made by running the Program).
     Whether that is true depends on what the Program does.
     
       1. You may copy and distribute verbatim copies of the Program's
     source code as you receive it, in any medium, provided that you
     conspicuously and appropriately publish on each copy an appropriate
     copyright notice and disclaimer of warranty; keep intact all the
     notices that refer to this License and to the absence of any warranty;
     and give any other recipients of the Program a copy of this License
     along with the Program.
     
     You may charge a fee for the physical act of transferring a copy, and
     you may at your option offer warranty protection in exchange for a fee.
     
       2. You may modify your copy or copies of the Program or any portion
     of it, thus forming a work based on the Program, and copy and
     distribute such modifications or work under the terms of Section 1
     above, provided that you also meet all of these conditions:
     
         a) You must cause the modified files to carry prominent notices
         stating that you changed the files and the date of any change.
     
         b) You must cause any work that you distribute or publish, that in
         whole or in part contains or is derived from the Program or any
         part thereof, to be licensed as a whole at no charge to all third
         parties under the terms of this License.
     
         c) If the modified program normally reads commands interactively
         when run, you must cause it, when started running for such
         interactive use in the most ordinary way, to print or display an
         announcement including an appropriate copyright notice and a
         notice that there is no warranty (or else, saying that you provide
         a warranty) and that users may redistribute the program under
         these conditions, and telling the user how to view a copy of this
         License.  (Exception: if the Program itself is interactive but
         does not normally print such an announcement, your work based on
         the Program is not required to print an announcement.)
     
     These requirements apply to the modified work as a whole.  If
     identifiable sections of that work are not derived from the Program,
     and can be reasonably considered independent and separate works in
     themselves, then this License, and its terms, do not apply to those
     sections when you distribute them as separate works.  But when you
     distribute the same sections as part of a whole which is a work based
     on the Program, the distribution of the whole must be on the terms of
     this License, whose permissions for other licensees extend to the
     entire whole, and thus to each and every part regardless of who wrote it.
     
     Thus, it is not the intent of this section to claim rights or contest
     your rights to work written entirely by you; rather, the intent is to
     exercise the right to control the distribution of derivative or
     collective works based on the Program.
     
     In addition, mere aggregation of another work not based on the Program
     with the Program (or with a work based on the Program) on a volume of
     a storage or distribution medium does not bring the other work under
     the scope of this License.
     
       3. You may copy and distribute the Program (or a work based on it,
     under Section 2) in object code or executable form under the terms of
     Sections 1 and 2 above provided that you also do one of the following:
     
         a) Accompany it with the complete corresponding machine-readable
         source code, which must be distributed under the terms of Sections
         1 and 2 above on a medium customarily used for software interchange; or,
     
         b) Accompany it with a written offer, valid for at least three
         years, to give any third party, for a charge no more than your
         cost of physically performing source distribution, a complete
         machine-readable copy of the corresponding source code, to be
         distributed under the terms of Sections 1 and 2 above on a medium
         customarily used for software interchange; or,
     
         c) Accompany it with the information you received as to the offer
         to distribute corresponding source code.  (This alternative is
         allowed only for noncommercial distribution and only if you
         received the program in object code or executable form with such
         an offer, in accord with Subsection b above.)
     
     The source code for a work means the preferred form of the work for
     making modifications to it.  For an executable work, complete source
     code means all the source code for all modules it contains, plus any
     associated interface definition files, plus the scripts used to
     control compilation and installation of the executable.  However, as a
     special exception, the source code distributed need not include
     anything that is normally distributed (in either source or binary
     form) with the major components (compiler, kernel, and so on) of the
     operating system on which the executable runs, unless that component
     itself accompanies the executable.
     
     If distribution of executable or object code is made by offering
     access to copy from a designated place, then offering equivalent
     access to copy the source code from the same place counts as
     distribution of the source code, even though third parties are not
     compelled to copy the source along with the object code.
     
       4. You may not copy, modify, sublicense, or distribute the Program
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense or distribute the Program is
     void, and will automatically terminate your rights under this License.
     However, parties who have received copies, or rights, from you under
     this License will not have their licenses terminated so long as such
     parties remain in full compliance.
     
       5. You are not required to accept this License, since you have not
     signed it.  However, nothing else grants you permission to modify or
     distribute the Program or its derivative works.  These actions are
     prohibited by law if you do not accept this License.  Therefore, by
     modifying or distributing the Program (or any work based on the
     Program), you indicate your acceptance of this License to do so, and
     all its terms and conditions for copying, distributing or modifying
     the Program or works based on it.
     
       6. Each time you redistribute the Program (or any work based on the
     Program), the recipient automatically receives a license from the
     original licensor to copy, distribute or modify the Program subject to
     these terms and conditions.  You may not impose any further
     restrictions on the recipients' exercise of the rights granted herein.
     You are not responsible for enforcing compliance by third parties to
     this License.
     
       7. If, as a consequence of a court judgment or allegation of patent
     infringement or for any other reason (not limited to patent issues),
     conditions are imposed on you (whether by court order, agreement or
     otherwise) that contradict the conditions of this License, they do not
     excuse you from the conditions of this License.  If you cannot
     distribute so as to satisfy simultaneously your obligations under this
     License and any other pertinent obligations, then as a consequence you
     may not distribute the Program at all.  For example, if a patent
     license would not permit royalty-free redistribution of the Program by
     all those who receive copies directly or indirectly through you, then
     the only way you could satisfy both it and this License would be to
     refrain entirely from distribution of the Program.
     
     If any portion of this section is held invalid or unenforceable under
     any particular circumstance, the balance of the section is intended to
     apply and the section as a whole is intended to apply in other
     circumstances.
     
     It is not the purpose of this section to induce you to infringe any
     patents or other property right claims or to contest validity of any
     such claims; this section has the sole purpose of protecting the
     integrity of the free software distribution system, which is
     implemented by public license practices.  Many people have made
     generous contributions to the wide range of software distributed
     through that system in reliance on consistent application of that
     system; it is up to the author/donor to decide if he or she is willing
     to distribute software through any other system and a licensee cannot
     impose that choice.
     
     This section is intended to make thoroughly clear what is believed to
     be a consequence of the rest of this License.
     
       8. If the distribution and/or use of the Program is restricted in
     certain countries either by patents or by copyrighted interfaces, the
     original copyright holder who places the Program under this License
     may add an explicit geographical distribution limitation excluding
     those countries, so that distribution is permitted only in or among
     countries not thus excluded.  In such case, this License incorporates
     the limitation as if written in the body of this License.
     
       9. The Free Software Foundation may publish revised and/or new versions
     of the General Public License from time to time.  Such new versions will
     be similar in spirit to the present version, but may differ in detail to
     address new problems or concerns.
     
     Each version is given a distinguishing version number.  If the Program
     specifies a version number of this License which applies to it and "any
     later version", you have the option of following the terms and conditions
     either of that version or of any later version published by the Free
     Software Foundation.  If the Program does not specify a version number of
     this License, you may choose any version ever published by the Free Software
     Foundation.
     
       10. If you wish to incorporate parts of the Program into other free
     programs whose distribution conditions are different, write to the author
     to ask for permission.  For software which is copyrighted by the Free
     Software Foundation, write to the Free Software Foundation; we sometimes
     make exceptions for this.  Our decision will be guided by the two goals
     of preserving the free status of all derivatives of our free software and
     of promoting the sharing and reuse of software generally.
     
     			    NO WARRANTY
     
       11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY
     FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN
     OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES
     PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED
     OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
     MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS
     TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE
     PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,
     REPAIR OR CORRECTION.
     
       12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
     WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR
     REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,
     INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING
     OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED
     TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY
     YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER
     PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE
     POSSIBILITY OF SUCH DAMAGES.
     
     		     END OF TERMS AND CONDITIONS
     
     	Appendix: How to Apply These Terms to Your New Programs
     
       If you develop a new program, and you want it to be of the greatest
     possible use to the public, the best way to achieve this is to make it
     free software which everyone can redistribute and change under these terms.
     
       To do so, attach the following notices to the program.  It is safest
     to attach them to the start of each source file to most effectively
     convey the exclusion of warranty; and each file should have at least
     the "copyright" line and a pointer to where the full notice is found.
     
         <one line to give the program's name and a brief idea of what it does.>
         Copyright (C) 19yy  <name of author>
     
         This program is free software; you can redistribute it and/or modify
         it under the terms of the GNU General Public License as published by
         the Free Software Foundation; either version 2 of the License, or
         (at your option) any later version.
     
         This program is distributed in the hope that it will be useful,
         but WITHOUT ANY WARRANTY; without even the implied warranty of
         MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
         GNU General Public License for more details.
     
         You should have received a copy of the GNU General Public License
         along with this program; if not, write to the Free Software
         Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
     
     Also add information on how to contact you by electronic and paper mail.
     
     If the program is interactive, make it output a short notice like this
     when it starts in an interactive mode:
     
         Gnomovision version 69, Copyright (C) 19yy name of author
         Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
         This is free software, and you are welcome to redistribute it
         under certain conditions; type `show c' for details.
     
     The hypothetical commands `show w' and `show c' should show the appropriate
     parts of the General Public License.  Of course, the commands you use may
     be called something other than `show w' and `show c'; they could even be
     mouse-clicks or menu items--whatever suits your program.
     
     You should also get your employer (if you work as a programmer) or your
     school, if any, to sign a "copyright disclaimer" for the program, if
     necessary.  Here is a sample; alter the names:
     
       Yoyodyne, Inc., hereby disclaims all copyright interest in the program
       `Gnomovision' (which makes passes at compilers) written by James Hacker.
     
       <signature of Ty Coon>, 1 April 1989
       Ty Coon, President of Vice
     
     This General Public License does not permit incorporating your program into
     proprietary programs.  If your program is a subroutine library, you may
     consider it more useful to permit linking proprietary applications with the
     library.  If this is what you want to do, use the GNU Library General
     Public License instead of this License.

   Geoffrey Noer noer@cygnus.com

